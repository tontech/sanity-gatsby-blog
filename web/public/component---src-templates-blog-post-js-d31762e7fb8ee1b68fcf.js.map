{"version":3,"sources":["webpack:///./src/components/author-list.js","webpack:///./src/components/blog-post.js","webpack:///./src/templates/blog-post.js"],"names":["AuthorList","items","title","className","styles","root","headline","list","map","author","_key","authorName","name","key","listItem","avatar","image","asset","src","imageUrlFor","buildImageObj","width","height","fit","url","alt","BlogPost","props","_rawBody","authors","categories","mainImage","publishedAt","Math","floor","auto","grid","mainContent","blocks","metaContent","differenceInDays","Date","distanceInWords","format","categoriesHeadline","category","_id","query","BlogPostTemplate","data","errors","post","description","toPlainText","_rawExcerpt"],"mappings":"mMAwCeA,MAlCf,YAAsC,IAAhBC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,MAC3B,OACE,yBAAKC,UAAWC,IAAOC,MACrB,wBAAIF,UAAWC,IAAOE,UAAWJ,GACjC,wBAAIC,UAAWC,IAAOG,MACnBN,EAAMO,KAAI,YAAqB,IAAnBC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KACbC,EAAaF,GAAUA,EAAOG,KACpC,OACE,wBAAIC,IAAKH,EAAMP,UAAWC,IAAOU,UAC/B,6BACE,yBAAKX,UAAWC,IAAOW,QACpBN,GAAUA,EAAOO,OAASP,EAAOO,MAAMC,OACtC,yBACEC,IAAKC,YAAYC,YAAcX,EAAOO,QACnCK,MAAM,KACNC,OAAO,KACPC,IAAI,QACJC,MACHC,IAAI,OAKZ,6BACE,6BAAMd,GAAc,qD,kBC6BrBe,MAjDf,SAAmBC,GAAQ,IAClBC,EAAgED,EAAhEC,SAAUC,EAAsDF,EAAtDE,QAASC,EAA6CH,EAA7CG,WAAY5B,EAAiCyB,EAAjCzB,MAAO6B,EAA0BJ,EAA1BI,UAAWC,EAAeL,EAAfK,YACxD,OACE,6BAAS7B,UAAWC,IAAOC,MACxB0B,GAAaA,EAAUd,OACtB,yBAAKd,UAAWC,IAAO2B,WACrB,yBACEb,IAAKC,YAAYC,YAAcW,IAC5BV,MAAM,MACNC,OAAOW,KAAKC,MAAO,MACnBX,IAAI,QACJY,KAAK,UACLX,MACHC,IAAKM,EAAUN,OAIrB,kBAAC,IAAD,KACE,yBAAKtB,UAAWC,IAAOgC,MACrB,yBAAKjC,UAAWC,IAAOiC,aACrB,wBAAIlC,UAAWC,IAAOF,OAAQA,GAC7B0B,GAAY,kBAAC,IAAD,CAAcU,OAAQV,KAErC,2BAAOzB,UAAWC,IAAOmC,aACtBP,GACC,yBAAK7B,UAAWC,IAAO4B,aACpBQ,2BAAiB,IAAIC,KAAKT,GAAc,IAAIS,MAAU,EACnDC,0BAAgB,IAAID,KAAKT,GAAc,IAAIS,MAC3CE,iBAAO,IAAIF,KAAKT,GAAc,kBAGrCH,GAAW,kBAAC,EAAD,CAAY5B,MAAO4B,EAAS3B,MAAM,YAC7C4B,GACC,yBAAK3B,UAAWC,IAAO0B,YACrB,wBAAI3B,UAAWC,IAAOwC,oBAAtB,cACA,4BACGd,EAAWtB,KAAI,SAAAqC,GAAQ,OACtB,wBAAIhC,IAAKgC,EAASC,KAAMD,EAAS3C,iB,kBC/CrD,sCASO,IAAM6C,EAAK,aAqEHC,UAnBU,SAAArB,GAAU,IAC1BsB,EAAgBtB,EAAhBsB,KAAMC,EAAUvB,EAAVuB,OACPC,EAAOF,GAAQA,EAAKE,KAC1B,OACE,kBAAC,IAAD,KACGD,GAAU,kBAAC,IAAD,CAAKhD,MAAM,kBACrBiD,GAAQ,kBAAC,IAAD,CAAKjD,MAAOiD,EAAKjD,OAAS,WAAYkD,YAAaC,YAAYF,EAAKG,aAActC,MAAOmC,EAAKpB,YAEtGmB,GACC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAkBA,OAAQA,KAI7BC,GAAQ,kBAAC,EAAaA","file":"component---src-templates-blog-post-js-d31762e7fb8ee1b68fcf.js","sourcesContent":["import React from 'react'\nimport {buildImageObj} from '../lib/helpers'\nimport {imageUrlFor} from '../lib/image-url'\n\nimport styles from './author-list.module.css'\n\nfunction AuthorList ({items, title}) {\n  return (\n    <div className={styles.root}>\n      <h2 className={styles.headline}>{title}</h2>\n      <ul className={styles.list}>\n        {items.map(({author, _key}) => {\n          const authorName = author && author.name\n          return (\n            <li key={_key} className={styles.listItem}>\n              <div>\n                <div className={styles.avatar}>\n                  {author && author.image && author.image.asset && (\n                    <img\n                      src={imageUrlFor(buildImageObj(author.image))\n                        .width(100)\n                        .height(100)\n                        .fit('crop')\n                        .url()}\n                      alt=''\n                    />\n                  )}\n                </div>\n              </div>\n              <div>\n                <div>{authorName || <em>Missing name</em>}</div>\n              </div>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n\nexport default AuthorList\n","import {format, distanceInWords, differenceInDays} from 'date-fns'\nimport React from 'react'\nimport {buildImageObj} from '../lib/helpers'\nimport {imageUrlFor} from '../lib/image-url'\nimport PortableText from './portableText'\nimport Container from './container'\nimport AuthorList from './author-list'\n\nimport styles from './blog-post.module.css'\n\nfunction BlogPost (props) {\n  const {_rawBody, authors, categories, title, mainImage, publishedAt} = props\n  return (\n    <article className={styles.root}>\n      {mainImage && mainImage.asset && (\n        <div className={styles.mainImage}>\n          <img\n            src={imageUrlFor(buildImageObj(mainImage))\n              .width(1200)\n              .height(Math.floor((9 / 16) * 1200))\n              .fit('crop')\n              .auto('format')\n              .url()}\n            alt={mainImage.alt}\n          />\n        </div>\n      )}\n      <Container>\n        <div className={styles.grid}>\n          <div className={styles.mainContent}>\n            <h1 className={styles.title}>{title}</h1>\n            {_rawBody && <PortableText blocks={_rawBody} />}\n          </div>\n          <aside className={styles.metaContent}>\n            {publishedAt && (\n              <div className={styles.publishedAt}>\n                {differenceInDays(new Date(publishedAt), new Date()) > 3\n                  ? distanceInWords(new Date(publishedAt), new Date())\n                  : format(new Date(publishedAt), 'MMMM Do, YYYY')}\n              </div>\n            )}\n            {authors && <AuthorList items={authors} title='Authors' />}\n            {categories && (\n              <div className={styles.categories}>\n                <h3 className={styles.categoriesHeadline}>Categories</h3>\n                <ul>\n                  {categories.map(category => (\n                    <li key={category._id}>{category.title}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n          </aside>\n        </div>\n      </Container>\n    </article>\n  )\n}\n\nexport default BlogPost\n","import React from 'react'\nimport {graphql} from 'gatsby'\nimport Container from '../components/container'\nimport GraphQLErrorList from '../components/graphql-error-list'\nimport BlogPost from '../components/blog-post'\nimport SEO from '../components/seo'\nimport Layout from '../containers/layout'\nimport {toPlainText} from '../lib/helpers'\n\nexport const query = graphql`\n  query BlogPostTemplateQuery($id: String!) {\n    post: sanityPost(id: {eq: $id}) {\n      id\n      publishedAt\n      categories {\n        _id\n        title\n      }\n      mainImage {\n        ...SanityImage\n        alt\n      }\n      title\n      slug {\n        current\n      }\n      _rawExcerpt(resolveReferences: {maxDepth: 5})\n      _rawBody(resolveReferences: {maxDepth: 5})\n      authors {\n        _key\n        author {\n          image {\n            crop {\n              _key\n              _type\n              top\n              bottom\n              left\n              right\n            }\n            hotspot {\n              _key\n              _type\n              x\n              y\n              height\n              width\n            }\n            asset {\n              _id\n            }\n          }\n          name\n        }\n      }\n    }\n  }\n`\n\nconst BlogPostTemplate = props => {\n  const {data, errors} = props\n  const post = data && data.post\n  return (\n    <Layout>\n      {errors && <SEO title='GraphQL Error' />}\n      {post && <SEO title={post.title || 'Untitled'} description={toPlainText(post._rawExcerpt)} image={post.mainImage} />}\n\n      {errors && (\n        <Container>\n          <GraphQLErrorList errors={errors} />\n        </Container>\n      )}\n\n      {post && <BlogPost {...post} />}\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n"],"sourceRoot":""}